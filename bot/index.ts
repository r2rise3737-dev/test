// index.ts ‚Äî –ö–∞–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –õ–°: WebApp-–∫–Ω–æ–ø–∫–∏
// –ó–∞–¥–∞—á–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –í –ö–ê–ù–ê–õ–ï, –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ overlay WebApp (–±–µ–∑ –õ–°).
// –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –õ–° –∫–∞–∫ —Ä–∞–Ω—å—à–µ (–º–µ–Ω—é/–∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è).

import 'dotenv/config';
import { Telegraf, Markup } from 'telegraf';
import fs from 'fs';
import path from 'path';

const BOT_TOKEN = process.env.BOT_TOKEN!;
if (!BOT_TOKEN) throw new Error('BOT_TOKEN is missing');

const LANDING_URL = process.env.LANDING_URL || 'https://example.com';
const ADMIN_IDS = (process.env.ADMIN_IDS || '').split(',').map(s => Number(s.trim())).filter(Boolean);
const BUTTONS_PER_ROW = Math.max(1, Number(process.env.BUTTONS_PER_ROW || 2));
const BUTTON_LABEL_LIMIT = Math.max(10, Number(process.env.BUTTON_LABEL_LIMIT || 28));
const CHANNEL_USERNAME = process.env.CHANNEL_USERNAME || '';
const WEBAPP_URL = process.env.WEBAPP_URL || (process.env.PUBLIC_URL ? process.env.PUBLIC_URL + '/webapp' : 'https://example.com/webapp');

type Course = { id: string; title: string; short?: string; label?: string; desc?: string; rub?: number; section?: 'tarot'|'astro' };

function fileExists(p: string) {
  const abs = path.isAbsolute(p) ? p : path.join(process.cwd(), p);
  return fs.existsSync(abs);
}
function readJSON<T>(p: string): T {
  const abs = path.isAbsolute(p) ? p : path.join(process.cwd(), p);
  return JSON.parse(fs.readFileSync(abs, 'utf8')) as T;
}
function safeReadJSONMulti<T>(candidates: string[], fallback: T): T {
  for (const p of candidates) {
    try { if (fileExists(p)) return readJSON<T>(p); } catch {}
  }
  return fallback;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –∫—É—Ä—Å–æ–≤ (–∫–∞–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
function loadCoursesFlat(): Course[] {
  const raw = safeReadJSONMulti<any>(['data/courses.json','courses.json'], []);
  return Array.isArray(raw) ? raw : [];
}
function clipLabel(s: string) {
  const t = (s || '').trim();
  return t.length > BUTTON_LABEL_LIMIT ? t.slice(0, BUTTON_LABEL_LIMIT - 1) + '‚Ä¶' : t;
}
function chunk<T>(arr: T[], size: number) {
  const out: T[][] = [];
  for (let i=0;i<arr.length;i+=size) out.push(arr.slice(i, i+size));
  return out;
}

const bot = new Telegraf(BOT_TOKEN);

// –ü—É–±–ª–∏—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–õ–Ø –ö–ê–ù–ê–õ–ê ‚Äî –í–ù–ï Callback: —Ç–æ–ª—å–∫–æ WebApp/URL –∫–Ω–æ–ø–∫–∏
function publicKeyboard() {
  const list = loadCoursesFlat();
  const kb: any[] = [];

  // –ü–µ—Ä–≤—ã–π —Ä—è–¥ ‚Äî —Ä–∞–∑–¥–µ–ª—ã (–¢–∞—Ä–æ/–ê—Å—Ç—Ä–æ) –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –≤–∫–ª–∞–¥–∫–∏ –≤–Ω—É—Ç—Ä–∏ WebApp
  kb.push([
    Markup.button.webApp('üîÆ –¢–∞—Ä–æ', `${WEBAPP_URL}?section=tarot`),
    Markup.button.webApp('üåå –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è', `${WEBAPP_URL}?section=astro`),
  ]);

  // –î–∞–ª–µ–µ ‚Äî 10 –∫—É—Ä—Å–æ–≤, –∫–∞–∂–¥—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç WebApp –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∫—É—Ä—Å–∞ —Å –æ–ø–ª–∞—Ç–æ–π
  const rows = chunk(
    list.map(c => Markup.button.webApp(clipLabel(c.label || c.short || c.title), `${WEBAPP_URL}?buy=${encodeURIComponent(c.id)}`)),
    BUTTONS_PER_ROW
  );
  kb.push(...rows);

  // –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –ª–µ–Ω–¥–∏–Ω–≥ (–∫–∞–∫ –±—ã–ª–æ)
  kb.push([Markup.button.url('‚ú® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã', LANDING_URL)]);

  return Markup.inlineKeyboard(kb);
}

// /post ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å –Ω—É–∂–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
bot.command('post', async (ctx) => {
  const uid = ctx.from?.id || 0;
  if (ADMIN_IDS.length && !ADMIN_IDS.includes(uid)) {
    await ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
    return;
  }
  const args = (ctx.message as any).text.split(' ').slice(1);
  const channel = args[0] || CHANNEL_USERNAME;
  if (!channel) { await ctx.reply('–£–∫–∞–∂–∏ –∫–∞–Ω–∞–ª: /post @channel (–∏–ª–∏ –¥–æ–±–∞–≤—å CHANNEL_USERNAME –≤ .env)'); return; }

  const text = [
    '–ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ –∫–∞–Ω–∞–ª–µ.',
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –∫—É—Ä—Å ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.'
  ].join('\n');

  try {
    await ctx.telegram.sendMessage(channel, text, publicKeyboard());
    await ctx.reply('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ');
  } catch (e: any) {
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${e?.description || e?.message || e}`);
  }
});

// –õ–° –æ—Å—Ç–∞—ë—Ç—Å—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /menu)
bot.command('menu', async (ctx) => {
  const uid = ctx.from?.id || 0;
  if (!ADMIN_IDS.includes(uid)) {
    await ctx.reply('–≠—Ç–æ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.');
    return;
  }
  await ctx.reply('–ê–¥–º–∏–Ω‚Äë–º–µ–Ω—é: —Ñ—É–Ω–∫—Ü–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ /post.');
});

bot.launch().then(async () => {
  const me = await bot.telegram.getMe();
  console.log(`[boot] bot @${me.username} started`);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));